import { ScaleBand, ScaleLinear, ScaleTime } from 'd3-scale';
import { CurveFactory, stackOffsetNone } from 'd3-shape';
import { SetStateAction } from 'jotai';
import React, { CSSProperties } from 'react';
import * as TSTB from 'ts-toolbelt';
import { TooltipRendererProps } from './components/TooltipRenderer';
import { SetAtom } from 'jotai/core/atom';
export declare type ChartOptions<TDatum> = {
    data: UserSerie<TDatum>[];
    primaryAxis: AxisOptions<TDatum>;
    secondaryAxes: AxisOptions<TDatum>[];
    getSeriesStyle?: (series: Series<TDatum>, status: SeriesFocusStatus) => SeriesStyles;
    getDatumStyle?: (datum: Datum<TDatum>, status: DatumFocusStatus) => DatumStyles;
    getSeriesOrder?: (series: Series<TDatum>[]) => Series<TDatum>[];
    groupingMode?: GroupingMode;
    showVoronoi?: boolean;
    showDebugAxes?: boolean;
    defaultColors?: string[];
    initialWidth?: number;
    initialHeight?: number;
    brush?: {
        style?: CSSProperties;
        onSelect?: (selection: {
            pointer: Pointer;
            start: unknown;
            end: unknown;
        }) => void;
    };
    onFocusDatum?: (datum: Datum<TDatum> | null) => void;
    onClickDatum?: (datum: Datum<TDatum> | null, event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void;
    dark?: boolean;
    renderSVG?: () => React.ReactNode;
    primaryCursor?: boolean | CursorOptions;
    secondaryCursor?: boolean | CursorOptions;
    tooltip?: boolean | TooltipOptions<TDatum>;
};
export declare type RequiredChartOptions<TDatum> = TSTB.Object.Required<ChartOptions<TDatum>, 'getSeriesStyle' | 'getDatumStyle' | 'getSeriesOrder' | 'groupingMode' | 'showVoronoi' | 'defaultColors' | 'initialWidth' | 'initialHeight'>;
export declare type ChartContextValue<TDatum> = {
    getOptions: () => RequiredChartOptions<TDatum>;
    gridDimensions: GridDimensions;
    primaryAxis: Axis<TDatum>;
    secondaryAxes: Axis<TDatum>[];
    axesInfo: AxesInfo;
    series: Series<TDatum>[];
    orderedSeries: Series<TDatum>[];
    groupedDatums: Map<any, Datum<TDatum>[]>;
    width: number;
    height: number;
    svgRect: ClientRect;
    getSeriesStatusStyle: (series: Series<TDatum>, focusedDatum: Datum<TDatum> | null) => SeriesStyles;
    getDatumStatusStyle: (datum: Datum<TDatum>, focusedDatum: Datum<TDatum> | null) => DatumStyles;
    useAxisDimensionsAtom: () => [
        AxisDimensions,
        SetAtom<SetStateAction<AxisDimensions>>
    ];
    useFocusedDatumAtom: () => [
        Datum<TDatum> | null,
        SetAtom<SetStateAction<Datum<TDatum> | null>>
    ];
};
export declare type TooltipOptions<TDatum> = {
    align?: AlignMode;
    alignPriority?: AlignPosition[];
    padding?: number;
    tooltipArrowPadding?: number;
    render?: (props: TooltipRendererProps<TDatum>) => React.ReactNode;
    invert?: boolean;
};
export declare type ResolvedTooltipOptions<TDatum> = TSTB.Object.Required<TooltipOptions<TDatum>, 'align' | 'alignPriority' | 'padding' | 'tooltipArrowPadding' | 'anchor' | 'render'>;
export declare type SeriesStyles = CSSProperties & {
    area?: CSSProperties;
    line?: CSSProperties;
    circle?: CSSProperties;
    rectangle?: CSSProperties;
};
export declare type DatumStyles = CSSProperties & {
    area?: CSSProperties;
    line?: CSSProperties;
    circle?: CSSProperties;
    rectangle?: CSSProperties;
};
export declare type Position = 'top' | 'right' | 'bottom' | 'left';
export declare type GroupingMode = 'single' | 'series' | 'primary' | 'secondary';
export declare type AlignMode = 'auto' | 'right' | 'topRight' | 'bottomRight' | 'left' | 'topLeft' | 'bottomLeft' | 'top' | 'bottom' | 'center';
export declare type AlignPosition = 'right' | 'topRight' | 'bottomRight' | 'left' | 'topLeft' | 'bottomLeft' | 'top' | 'bottom';
export declare type AxisType = 'ordinal' | 'time' | 'localTime' | 'linear' | 'log';
export declare type AnchorMode = 'pointer' | 'closest' | 'center' | 'top' | 'bottom' | 'left' | 'right' | 'gridTop' | 'gridBottom' | 'gridLeft' | 'gridRight' | 'gridCenter';
export declare type Side = 'left' | 'right' | 'top' | 'bottom';
declare type PointerBase = {
    x: number;
    y: number;
    svgHovered: boolean;
};
export declare type PointerUnpressed = PointerBase & {
    dragging: false;
};
export declare type PointerPressed = PointerBase & {
    dragging: true;
    startX: number;
    startY: number;
};
export declare type Pointer = PointerUnpressed | PointerPressed;
export declare type ChartOffset = {
    left: number;
    top: number;
    width: number;
    height: number;
};
export declare type AxisDimension = {
    left: number;
    right: number;
    top: number;
    bottom: number;
    width: number;
    height: number;
};
export declare type AxisDimensions = {
    left: Record<string, AxisDimension>;
    right: Record<string, AxisDimension>;
    top: Record<string, AxisDimension>;
    bottom: Record<string, AxisDimension>;
};
export declare type AxisOptionsBase = {
    isPrimary?: boolean;
    primaryAxisId?: string;
    elementType?: 'line' | 'area' | 'bar';
    showDatumElements?: boolean;
    curve?: CurveFactory;
    invert?: boolean;
    position: Position;
    minTickPaddingForRotation?: number;
    tickLabelRotationDeg?: number;
    innerBandPadding?: number;
    outerBandPadding?: number;
    minBandSize?: number;
    maxBandSize?: number;
    showGrid?: boolean;
    show?: boolean;
    stacked?: boolean;
    stackOffset?: typeof stackOffsetNone;
    id?: string;
    styles?: CSSProperties & {
        line?: CSSProperties;
        tick?: CSSProperties;
    };
};
export declare type AxisTimeOptions<TDatum> = AxisOptionsBase & {
    scaleType: 'time' | 'localTime';
    getValue: (datum: TDatum) => ChartValue<Date>;
    min?: number;
    max?: number;
    hardMin?: number;
    hardMax?: number;
    base?: number;
    formatters?: {
        scale?: (value: Date, formatters: AxisTimeOptions<TDatum>['formatters']) => string;
        tooltip?: (value: Date, formatters: AxisTimeOptions<TDatum>['formatters']) => React.ReactNode;
        cursor?: (value: Date, formatters: AxisTimeOptions<TDatum>['formatters']) => React.ReactNode;
    };
};
export declare type AxisLinearOptions<TDatum> = AxisOptionsBase & {
    scaleType: 'linear' | 'log';
    getValue: (datum: TDatum) => ChartValue<number>;
    min?: number;
    max?: number;
    hardMin?: number;
    hardMax?: number;
    base?: number;
    formatters?: {
        scale?: (value: number, formatters: AxisLinearOptions<TDatum>['formatters']) => string;
        tooltip?: (value: number, formatters: AxisLinearOptions<TDatum>['formatters']) => React.ReactNode;
        cursor?: (value: number, formatters: AxisLinearOptions<TDatum>['formatters']) => React.ReactNode;
    };
};
export declare type AxisBandOptions<TDatum> = AxisOptionsBase & {
    scaleType: 'band';
    getValue: (datum: TDatum) => ChartValue<any>;
    originalSinBandSize?: number;
    formatters?: {
        scale?: (value: any, formatters: AxisBandOptions<TDatum>['formatters']) => string;
        tooltip?: (value: React.ReactNode, formatters: AxisBandOptions<TDatum>['formatters']) => string;
        cursor?: (value: React.ReactNode, formatters: AxisBandOptions<TDatum>['formatters']) => string;
    };
};
export declare type AxisOptions<TDatum> = AxisTimeOptions<TDatum> | AxisLinearOptions<TDatum> | AxisBandOptions<TDatum>;
export declare type ResolvedAxisOptions<TAxisOptions> = TSTB.Object.Required<TAxisOptions & {}, 'minTickPaddingForRotation' | 'tickLabelRotationDeg' | 'innerBandPadding' | 'outerBandPadding' | 'show' | 'stacked'>;
export declare type ChartValue<T> = T | null | undefined;
export declare type AxisBase<TDatum> = {
    _?: TDatum;
    isVertical: boolean;
    range: [number, number];
};
export declare type AxisTime<TDatum> = Omit<AxisBase<TDatum> & ResolvedAxisOptions<AxisTimeOptions<TDatum>>, 'format'> & {
    axisFamily: 'time';
    scale: ScaleTime<number, number, never>;
    outerScale: ScaleTime<number, number, never>;
    bandScale: ScaleBand<number>;
    formatters: {
        default: (value: Date) => string;
        scale: (value: Date) => string;
        tooltip: (value: Date) => React.ReactNode;
        cursor: (value: Date) => React.ReactNode;
    };
};
export declare type AxisLinear<TDatum> = Omit<AxisBase<TDatum> & ResolvedAxisOptions<AxisLinearOptions<TDatum>>, 'format'> & {
    axisFamily: 'linear';
    scale: ScaleLinear<number, number, never>;
    outerScale: ScaleLinear<number, number, never>;
    bandScale: ScaleBand<number>;
    formatters: {
        default: (value: ChartValue<any>) => string;
        scale: (value: number) => string;
        tooltip: (value: number) => React.ReactNode;
        cursor: (value: number) => React.ReactNode;
    };
};
export declare type AxisBand<TDatum> = Omit<AxisBase<TDatum> & ResolvedAxisOptions<AxisBandOptions<TDatum>>, 'format'> & {
    axisFamily: 'band';
    scale: ScaleBand<any>;
    outerScale: ScaleBand<any>;
    formatters: {
        default: (value: any) => string;
        scale: (value: any) => string;
        tooltip: (value: React.ReactNode) => string;
        cursor: (value: React.ReactNode) => string;
    };
};
export declare type Axis<TDatum> = AxisTime<TDatum> | AxisLinear<TDatum> | AxisBand<TDatum>;
export declare type UserSerie<TDatum> = {
    data: TDatum[];
    id?: string;
    label?: string;
    color?: string;
    primaryAxisId?: string;
    secondaryAxisId?: string;
};
export declare type Series<TDatum> = {
    originalSeries: UserSerie<TDatum>;
    index: number;
    id: string;
    label: string;
    secondaryAxisId?: string;
    datums: Datum<TDatum>[];
    style?: CSSProperties;
};
export declare type Datum<TDatum> = {
    originalSeries: UserSerie<TDatum>;
    seriesIndex: number;
    seriesId: string;
    seriesLabel: string;
    index: number;
    originalDatum: TDatum;
    secondaryAxisId?: string;
    stackData?: StackDatum<TDatum>;
    group?: Datum<TDatum>[];
    style?: CSSProperties;
    element?: Element | null;
};
export declare type StackDatum<TDatum> = {
    0: number;
    1: number;
    data: Datum<TDatum>;
};
export declare type Measurement = Side | 'width' | 'height';
export declare type GridDimensions = {
    gridX: number;
    gridY: number;
    gridWidth: number;
    gridHeight: number;
};
export declare type AxesInfo = {
    xKey: 'primary' | 'secondary';
    yKey: 'primary' | 'secondary';
};
export declare type CursorOptions = {
    value?: unknown;
    show?: boolean;
    showLine?: boolean;
    showLabel?: boolean;
    axisId?: string;
    onChange?: () => void;
};
export declare type SeriesFocusStatus = 'none' | 'focused';
export declare type DatumFocusStatus = 'none' | 'focused' | 'groupFocused';
export {};
