import _slicedToArray from "reshow-runtime/es/helpers/slicedToArray";
import { expect } from "chai";
import sinon from "sinon";
import createReducer from "../createReducer";
describe("Test createReducer", function () {
  var reducer;
  beforeEach(function () {
    reducer = createReducer(function (state, action) {
      return action;
    }, {});
  });
  it("basic test", function () {
    var _reducer = reducer,
        _reducer2 = _slicedToArray(_reducer, 2),
        store = _reducer2[0],
        dispatch = _reducer2[1];

    var action = {
      aaa: "bbb"
    };
    dispatch(action);
    expect(store.getState()).to.deep.equal(action);
  });
  it("dispatch empty", function () {
    var _reducer3 = reducer,
        _reducer4 = _slicedToArray(_reducer3, 2),
        store = _reducer4[0],
        dispatch = _reducer4[1];

    dispatch();
    expect(store.getState()).to.be.empty;
  });
  it("Emit with custom event", function (done) {
    var _reducer5 = reducer,
        _reducer6 = _slicedToArray(_reducer5, 2),
        store = _reducer6[0],
        dispatch = _reducer6[1];

    var callback = sinon.spy();
    store.addListener(callback);
    dispatch();
    setTimeout(function () {
      expect(callback.called).to.be["true"];
      done();
    });
  });
  it("could support text dispatch", function () {
    var _reducer7 = reducer,
        _reducer8 = _slicedToArray(_reducer7, 2),
        store = _reducer8[0],
        dispatch = _reducer8[1];

    dispatch("xxx");
    expect(store.getState()).to.deep.equal({
      type: "xxx"
    });
  });
  it("Test reset", function () {
    var _createReducer = createReducer(function (state, action) {
      return action;
    }, "foo"),
        _createReducer2 = _slicedToArray(_createReducer, 2),
        store = _createReducer2[0],
        dispatch = _createReducer2[1];

    var resetVal = store.reset();
    expect(resetVal).to.equal("foo");
  });
  it("Test reset event", function (done) {
    var _reducer9 = reducer,
        _reducer10 = _slicedToArray(_reducer9, 2),
        store = _reducer10[0],
        dispatch = _reducer10[1];

    var callback = sinon.spy();
    store.addListener(callback);
    dispatch();
    setTimeout(function () {
      expect(callback.callCount).to.equal(1);
      store.reset();
      dispatch();
      setTimeout(function () {
        expect(callback.callCount).to.equal(1);
        done();
      });
    });
  });
});