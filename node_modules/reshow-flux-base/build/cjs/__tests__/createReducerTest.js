"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("reshow-runtime/helpers/slicedToArray"));

var _chai = require("chai");

var _sinon = _interopRequireDefault(require("sinon"));

var _createReducer3 = _interopRequireDefault(require("../createReducer"));

describe("Test createReducer", function () {
  var reducer;
  beforeEach(function () {
    reducer = (0, _createReducer3["default"])(function (state, action) {
      return action;
    }, {});
  });
  it("basic test", function () {
    var _reducer = reducer,
        _reducer2 = (0, _slicedToArray2["default"])(_reducer, 2),
        store = _reducer2[0],
        dispatch = _reducer2[1];

    var action = {
      aaa: "bbb"
    };
    dispatch(action);
    (0, _chai.expect)(store.getState()).to.deep.equal(action);
  });
  it("dispatch empty", function () {
    var _reducer3 = reducer,
        _reducer4 = (0, _slicedToArray2["default"])(_reducer3, 2),
        store = _reducer4[0],
        dispatch = _reducer4[1];

    dispatch();
    (0, _chai.expect)(store.getState()).to.be.empty;
  });
  it("Emit with custom event", function (done) {
    var _reducer5 = reducer,
        _reducer6 = (0, _slicedToArray2["default"])(_reducer5, 2),
        store = _reducer6[0],
        dispatch = _reducer6[1];

    var callback = _sinon["default"].spy();

    store.addListener(callback);
    dispatch();
    setTimeout(function () {
      (0, _chai.expect)(callback.called).to.be["true"];
      done();
    });
  });
  it("could support text dispatch", function () {
    var _reducer7 = reducer,
        _reducer8 = (0, _slicedToArray2["default"])(_reducer7, 2),
        store = _reducer8[0],
        dispatch = _reducer8[1];

    dispatch("xxx");
    (0, _chai.expect)(store.getState()).to.deep.equal({
      type: "xxx"
    });
  });
  it("Test reset", function () {
    var _createReducer = (0, _createReducer3["default"])(function (state, action) {
      return action;
    }, "foo"),
        _createReducer2 = (0, _slicedToArray2["default"])(_createReducer, 2),
        store = _createReducer2[0],
        dispatch = _createReducer2[1];

    var resetVal = store.reset();
    (0, _chai.expect)(resetVal).to.equal("foo");
  });
  it("Test reset event", function (done) {
    var _reducer9 = reducer,
        _reducer10 = (0, _slicedToArray2["default"])(_reducer9, 2),
        store = _reducer10[0],
        dispatch = _reducer10[1];

    var callback = _sinon["default"].spy();

    store.addListener(callback);
    dispatch();
    setTimeout(function () {
      (0, _chai.expect)(callback.callCount).to.equal(1);
      store.reset();
      dispatch();
      setTimeout(function () {
        (0, _chai.expect)(callback.callCount).to.equal(1);
        done();
      });
    });
  });
});