"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

var _chai = require("chai");

var _immutable = require("immutable");

var _toJS = _interopRequireDefault(require("../toJS"));

describe("Test toJS with object", function () {
  it("without set", function () {
    var foo = {
      foo: "bar"
    };
    var foo1 = (0, _toJS["default"])(foo);
    var foo2 = (0, _toJS["default"])(foo);
    (0, _chai.expect)(foo1 === foo2).to.be["true"];
  });
  it("set same value", function () {
    var foo = {
      foo: "bar"
    };
    var foo1 = (0, _toJS["default"])(foo);
    foo.foo = "bar";
    var foo2 = (0, _toJS["default"])(foo);
    (0, _chai.expect)(foo1 === foo2).to.be["true"];
    (0, _chai.expect)(foo1).to.deep.equal({
      foo: "bar"
    });
    (0, _chai.expect)(foo2).to.deep.equal({
      foo: "bar"
    });
  });
  it("set different value", function () {
    var foo = {
      foo: "bar"
    };
    var foo1 = (0, _toJS["default"])(foo);
    foo.foo = "bar1";
    var foo2 = (0, _toJS["default"])(foo);
    (0, _chai.expect)(foo1 === foo2).to.be["true"];
    (0, _chai.expect)(foo1).to.deep.equal({
      foo: "bar1"
    });
    (0, _chai.expect)(foo2).to.deep.equal({
      foo: "bar1"
    });
  });
});
describe("Test toJS with immuteable", function () {
  it("without set", function () {
    var foo = (0, _immutable.Map)({
      foo: "bar"
    });
    var foo1 = (0, _toJS["default"])(foo);
    var foo2 = (0, _toJS["default"])(foo);
    (0, _chai.expect)(foo1 === foo2).to.be["true"];
  });
  it("set same value", function () {
    var foo = (0, _immutable.Map)({
      foo: "bar"
    });
    var foo1 = (0, _toJS["default"])(foo);
    var foo2 = (0, _toJS["default"])(foo.set("foo", "bar"));
    (0, _chai.expect)(foo1 === foo2).to.be["true"];
    (0, _chai.expect)(foo1).to.deep.equal({
      foo: "bar"
    });
    (0, _chai.expect)(foo2).to.deep.equal({
      foo: "bar"
    });
  });
  it("set different value", function () {
    var foo = (0, _immutable.Map)({
      foo: "bar"
    });
    var foo1 = (0, _toJS["default"])(foo);
    var foo2 = (0, _toJS["default"])(foo.set("foo", "bar1"));
    (0, _chai.expect)(foo1 === foo2).to.be["false"];
    (0, _chai.expect)(foo1).to.deep.equal({
      foo: "bar"
    });
    (0, _chai.expect)(foo2).to.deep.equal({
      foo: "bar1"
    });
  });
});