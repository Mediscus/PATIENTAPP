import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _slicedToArray from "reshow-runtime/es/helpers/slicedToArray";
import React, { Component, StrictMode } from "react";
import { createReducer } from "reshow-flux-base";
import { expect } from "chai";
import { mount } from "reshow-unit";
import useConnect from "../useConnect";
describe("Test Connect hook for more test", function () {
  var reducer;
  beforeEach(function () {
    reducer = createReducer(function (state, action) {
      return action;
    }, {});
  });
  it("could register with store", function (done) {
    var _reducer = reducer,
        _reducer2 = _slicedToArray(_reducer, 2),
        store = _reducer2[0],
        dispatch = _reducer2[1];

    var FakeComponent = function FakeComponent(props) {
      var state = useConnect({
        storeLocator: function storeLocator() {
          return store;
        },
        calculateState: function calculateState(prevState, props) {
          return {
            foo: store.getState().foo
          };
        }
      })(props);
      return /*#__PURE__*/React.createElement("div", null, state.foo);
    };

    var wrap = mount( /*#__PURE__*/React.createElement(FakeComponent, null));
    dispatch({
      foo: "bar"
    });
    setTimeout(function () {
      expect(wrap.html()).to.equal("<div>bar</div>");
      done();
    });
  });
  it("could work with dispatcher", function (done) {
    var _reducer3 = reducer,
        _reducer4 = _slicedToArray(_reducer3, 2),
        store = _reducer4[0],
        dispatch = _reducer4[1];

    var calculateTimes = 0;

    var FakeComponent = function FakeComponent(props) {
      var state = useConnect({
        storeLocator: function storeLocator() {
          return store;
        },
        calculateState: function calculateState(prevState, props) {
          var state = store.getState();
          calculateTimes++;
          return {
            aaa: state.aaa
          };
        }
      })(props);
      return /*#__PURE__*/React.createElement("div", null, state.aaa);
    };

    expect(calculateTimes).to.equal(0);
    var wrap = mount( /*#__PURE__*/React.createElement(FakeComponent, null));
    setTimeout(function () {
      expect(calculateTimes).to.equal(2); //init and handlchange

      dispatch({
        aaa: "Hello dispatcher!"
      });
      setTimeout(function () {
        wrap.update();
        expect(calculateTimes).to.equal(3);
        expect(wrap.html()).to.equal("<div>Hello dispatcher!</div>");
        wrap.unmount();
        dispatch({
          aaa: "Hello Unmount!"
        });
        expect(calculateTimes).to.equal(3);
        done();
      });
    });
  });
  it("could work withProps", function (done) {
    var getStoresProps = null;
    var calculateStateProps = null;

    var _reducer5 = reducer,
        _reducer6 = _slicedToArray(_reducer5, 2),
        store = _reducer6[0],
        dispatch = _reducer6[1];

    var FakeComponent = function FakeComponent(props) {
      var state = useConnect({
        storeLocator: function storeLocator(props) {
          getStoresProps = props;
          return store;
        },
        calculateState: function calculateState(prevState, props) {
          calculateStateProps = _objectSpread({}, props);
          return {
            foo: props.foo
          };
        }
      })(props);
      return /*#__PURE__*/React.createElement("div", null, state.foo);
    };

    var changeFoo;

    var Parent = /*#__PURE__*/function (_Component) {
      _inherits(Parent, _Component);

      var _super = _createSuper(Parent);

      function Parent(props) {
        var _this;

        _classCallCheck(this, Parent);

        _this = _super.call(this, props);

        _defineProperty(_assertThisInitialized(_this), "state", {});

        changeFoo = function changeFoo(v) {
          _this.setState({
            foo: v
          });
        };

        return _this;
      }

      _createClass(Parent, [{
        key: "render",
        value: function render() {
          var foo = null;

          if (this.state && this.state.foo) {
            foo = this.state.foo;
          }

          return /*#__PURE__*/React.createElement(FakeComponent, {
            foo: foo,
            changeable: true
          });
        }
      }]);

      return Parent;
    }(Component);

    var wrap = mount( /*#__PURE__*/React.createElement(Parent, null));
    expect(getStoresProps).to.deep.include({
      foo: null
    });
    expect(calculateStateProps).to.deep.include({
      foo: null
    });
    changeFoo("bar");
    wrap.update();
    setTimeout(function () {
      expect(wrap.html()).to.equal("<div>bar</div>");
      expect(getStoresProps).to.deep.include({
        foo: "bar"
      });
      expect(calculateStateProps).to.deep.include({
        foo: "bar"
      });
      done();
    });
  });
  it("could work with empty calculateState", function () {
    var _reducer7 = reducer,
        _reducer8 = _slicedToArray(_reducer7, 2),
        store = _reducer8[0],
        dispatch = _reducer8[1];

    var FakeComponent = function FakeComponent(props) {
      var state = useConnect({
        storeLocator: function storeLocator() {
          return store;
        },
        calculateState: function calculateState(prevState, props) {}
      })(props);
      return /*#__PURE__*/React.createElement("div", null, state.foo);
    };

    var wrap = mount( /*#__PURE__*/React.createElement(FakeComponent, {
      aaa: "bbb"
    }));
    var props = wrap.props();
    expect(props).to.deep.include({
      aaa: "bbb"
    });
  });
});