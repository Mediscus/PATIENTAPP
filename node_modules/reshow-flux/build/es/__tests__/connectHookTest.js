import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _slicedToArray from "reshow-runtime/es/helpers/slicedToArray";
import React, { Component } from "react";
import { expect } from "chai";
import { mount, hideConsoleError, cleanIt } from "reshow-unit";
import { createReducer } from "reshow-flux-base";
import useConnect from "../useConnect";
describe("Test Connect Hook", function () {
  var reducer;
  beforeEach(function () {
    reducer = createReducer(function (state, action) {
      return action;
    });
  });
  it("basic test", function (done) {
    var _reducer = reducer,
        _reducer2 = _slicedToArray(_reducer, 2),
        store = _reducer2[0],
        dispatch = _reducer2[1];

    var Foo = function Foo(props) {
      var state = useConnect({
        storeLocator: function storeLocator() {
          return store;
        },
        calculateState: function calculateState(prevState, opt) {
          return opt.storeState;
        }
      })(props);
      return /*#__PURE__*/React.createElement("div", {
        className: state.foo
      });
    };

    var wrap = mount( /*#__PURE__*/React.createElement(Foo, null));
    expect(wrap.html()).to.equal("<div></div>");
    var a = {
      foo: "111"
    };
    dispatch(a);
    setTimeout(function () {
      expect(wrap.html()).to.equal('<div class="111"></div>');
      dispatch({
        foo: "222"
      });
      setTimeout(function () {
        expect(wrap.html()).to.equal('<div class="222"></div>');
        done();
      });
    });
  });
  it("test Warnings for some updates during render", function (done) {
    var _Foo;

    var _reducer3 = reducer,
        _reducer4 = _slicedToArray(_reducer3, 2),
        store = _reducer4[0],
        dispatch = _reducer4[1];
    /**
     * https://fb.me/setstate-in-render
     * https://reactjs.org/blog/2020/02/26/react-v16.13.0.html#warnings-for-some-updates-during-render
     */


    var init = 0;

    var Foo = function Foo(props) {
      var state = useConnect({
        storeLocator: function storeLocator() {
          return store;
        },
        calculateState: function calculateState(prevState, opt) {
          return opt.storeState;
        }
      })(props);

      if (init <= 1) {
        dispatch({
          foo: "bar"
        });
      }

      init++;
      return /*#__PURE__*/React.createElement("div", {
        className: state.foo
      });
    };

    var VDom = /*#__PURE__*/function (_Component) {
      _inherits(VDom, _Component);

      var _super = _createSuper(VDom);

      function VDom() {
        _classCallCheck(this, VDom);

        return _super.apply(this, arguments);
      }

      _createClass(VDom, [{
        key: "componentDidCatch",
        value: function componentDidCatch(error, errorInfo) {
          console.log({
            error: error,
            errorInfo: errorInfo
          });
        }
      }, {
        key: "render",
        value: function render() {
          return _Foo || (_Foo = /*#__PURE__*/React.createElement(Foo, null));
        }
      }]);

      return VDom;
    }(Component);

    var wrap = mount( /*#__PURE__*/React.createElement(VDom, null));
    setTimeout(function () {
      expect(wrap.html()).to.equal('<div class="bar"></div>');
      done();
    });
  });
});
describe("Test Connect Hook", function () {
  var reducer;
  beforeEach(function () {
    reducer = createReducer(function (state, action) {
      return action;
    });
    hideConsoleError();
  });
  afterEach(function () {
    cleanIt();
  });
  it("test store not defined", function () {
    var _Foo2;

    var _reducer5 = reducer,
        _reducer6 = _slicedToArray(_reducer5, 2),
        store = _reducer6[0],
        dispatch = _reducer6[1];

    var Foo = function Foo(props) {
      var state = useConnect({
        calculateState: function calculateState(prevState, opt) {
          return opt.storeState;
        }
      })(props);
      return /*#__PURE__*/React.createElement("div", {
        className: state.foo
      });
    };

    expect(function () {
      mount(_Foo2 || (_Foo2 = /*#__PURE__*/React.createElement(Foo, null)));
    }).to["throw"]();
  });
});