import _slicedToArray from "reshow-runtime/es/helpers/slicedToArray";
import React from "react";
import { expect } from "chai";
import { mount } from "reshow-unit";
import { createReducer } from "reshow-flux-base";
import sinon from "sinon";
import useStore from "../useStore";
describe("useStore Test", function () {
  var reducer;
  beforeEach(function () {
    reducer = createReducer(function (state, action) {
      return action;
    }, {});
  });
  it("test default", function () {
    var _reducer = reducer,
        _reducer2 = _slicedToArray(_reducer, 2),
        store = _reducer2[0],
        dispatch = _reducer2[1];

    var Comp = function Comp(props) {
      var state = useStore(store, function () {
        return function () {
          return "foo";
        };
      });
      return /*#__PURE__*/React.createElement("div", null, state);
    };

    var wrap = mount( /*#__PURE__*/React.createElement(Comp, null));
    expect(wrap.html()).to.equal("<div>foo</div>");
  });
  it("test apply dispatch", function (done) {
    var _reducer3 = reducer,
        _reducer4 = _slicedToArray(_reducer3, 2),
        store = _reducer4[0],
        dispatch = _reducer4[1];

    var Comp = function Comp(props) {
      var state = useStore(store, function (setState) {
        return function () {
          setState && setState("bar");
        };
      });
      return /*#__PURE__*/React.createElement("div", null, state);
    };

    var wrap = mount( /*#__PURE__*/React.createElement(Comp, null));
    dispatch();
    setTimeout(function () {
      expect(wrap.html()).to.equal("<div>bar</div>");
      done();
    });
  });
  it("test not apply dispatch", function (done) {
    var spy;

    var heeding = function heeding(setState) {
      spy = sinon.spy(function (state, action) {
        if (action && action.type === "on") {
          setState("bar");
        }

        return "foo";
      });
      return spy;
    };

    var _reducer5 = reducer,
        _reducer6 = _slicedToArray(_reducer5, 2),
        store = _reducer6[0],
        dispatch = _reducer6[1];

    var Comp = function Comp(props) {
      var state = useStore(store, heeding);
      return /*#__PURE__*/React.createElement("div", null, state);
    };

    var wrap = mount( /*#__PURE__*/React.createElement(Comp, null));
    expect(wrap.html()).to.equal("<div>foo</div>");
    expect(spy.callCount).to.equal(0);
    dispatch("on");
    setTimeout(function () {
      expect(spy.callCount).to.equal(1);
      expect(wrap.html()).to.equal("<div>bar</div>");
      dispatch("off");
      setTimeout(function () {
        expect(spy.callCount).to.equal(2);
        expect(wrap.html()).to.equal("<div>bar</div>");
        done();
      });
    });
  });
});