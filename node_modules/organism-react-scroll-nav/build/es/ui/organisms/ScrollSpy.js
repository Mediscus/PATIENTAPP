import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutPropertiesLoose from "reshow-runtime/es/helpers/objectWithoutPropertiesLoose";
var _excluded = ["noDelay", "monitorScroll", "id", "scrollMargin", "children", "container", "className", "attachTo"];
import React, { useRef, useMemo, useState, useEffect, useCallback } from "react";
import get from "get-object-value";
import { mixClass, build, getDisplayName, SemanticUI } from "react-atomic-molecule";
import { useDebounce } from "reshow-hooks";
import scrollStore from "../../src/stores/scrollStore";
import fastScrollStore from "../../src/stores/fastScrollStore";

var useScrollSpy = function useScrollSpy(props) {
  /**
   * monitorScroll use in store, in component just for reset props.
   */
  var _props$noDelay = props.noDelay,
      noDelay = _props$noDelay === void 0 ? false : _props$noDelay,
      _props$monitorScroll = props.monitorScroll,
      monitorScroll = _props$monitorScroll === void 0 ? true : _props$monitorScroll,
      id = props.id,
      scrollMargin = props.scrollMargin,
      children = props.children,
      container = props.container,
      className = props.className,
      attachTo = props.attachTo,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var _useState = useState(id),
      targetId = _useState[0],
      setTargetId = _useState[1];

  var lastEl = useRef();
  var lastConfig = useRef({});
  lastConfig.current = _objectSpread(_objectSpread({}, lastConfig.current), {}, {
    id: targetId,
    attachTo: attachTo,
    monitorScroll: monitorScroll,
    scrollMargin: scrollMargin
  });
  var thisClassName = useMemo(function () {
    return mixClass(className, "spy-tar-" + targetId);
  }, [targetId, className]);
  useEffect(function () {
    var store = noDelay ? fastScrollStore : scrollStore;
    var id = store.scroller.attach(expose);
    setTargetId(id);
    return function () {
      store.scroller.detach(expose);
    };
  }, []);
  var warnDebounce = useDebounce(function (args) {
    // for lazy render component, that warn delay 1 secs.
    if (!lastEl.current) {
      console.warn('Please use SemanticUI. props.container -> import {SemanticUI} from "react-atomic-molecule"', args);
    }
  }, 1000);
  var getOffsetEl = useCallback(function () {
    if (lastEl.current) {
      return lastEl.current;
    } else {
      warnDebounce({
        thisClassName: thisClassName,
        nextContainer: nextContainer
      });
    }
  }, [thisClassName, nextContainer]);
  var expose = {
    getOffsetEl: getOffsetEl,
    getId: function getId() {
      return lastConfig.current.id;
    },
    setId: setTargetId,
    getAttachTo: function getAttachTo() {
      return lastConfig.current.attachTo;
    },
    setAttachTo: function setAttachTo(attachTo) {
      return lastConfig.current.attachTo = attachTo;
    },
    getMonitorScroll: function getMonitorScroll() {
      return lastConfig.current.monitorScroll;
    },
    getScrollMargin: function getScrollMargin() {
      return lastConfig.current.scrollMargin;
    }
  };
  var hasScrollReceiver = useMemo(function () {
    return "ScrollReceiver" === getDisplayName(children) ? true : false;
  }, [children]);
  var nextContainer;
  var nextProps;

  var allProps = _objectSpread(_objectSpread({}, others), {}, {
    refCb: function refCb(el) {
      return el && (lastEl.current = el);
    },
    className: thisClassName,
    id: targetId
  });

  if (hasScrollReceiver) {
    nextContainer = children;
    nextProps = _objectSpread(_objectSpread(_objectSpread({}, children.props), allProps), {}, {
      targetId: targetId,
      container: container,
      noDelay: noDelay
    });
  } else {
    nextContainer = container || SemanticUI;
    nextProps = _objectSpread(_objectSpread({}, allProps), {}, {
      children: children
    });
  }

  return {
    nextContainer: nextContainer,
    nextProps: nextProps
  };
};

var ScrollSpy = function ScrollSpy(props) {
  var _useScrollSpy = useScrollSpy(props),
      nextContainer = _useScrollSpy.nextContainer,
      nextProps = _useScrollSpy.nextProps;

  return build(nextContainer)(nextProps);
};

export default ScrollSpy;