import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutPropertiesLoose from "reshow-runtime/es/helpers/objectWithoutPropertiesLoose";
var _excluded = ["scrollMargin", "noDelay", "children", "targetId", "container"];
import React, { isValidElement, useRef } from "react";
import Return from "reshow-return";
import { build, SemanticUI } from "react-atomic-molecule";
import { UNDEFINED } from "reshow-constant";
import scrollStore from "../../src/stores/scrollStore";
import fastScrollStore from "../../src/stores/fastScrollStore";
import { jsx as _jsx } from "react/jsx-runtime";

var ScrollReceiver = function ScrollReceiver(_ref) {
  var _ref$scrollMargin = _ref.scrollMargin,
      scrollMargin = _ref$scrollMargin === void 0 ? "default" : _ref$scrollMargin,
      _ref$noDelay = _ref.noDelay,
      noDelay = _ref$noDelay === void 0 ? false : _ref$noDelay,
      _children = _ref.children,
      targetId = _ref.targetId,
      container = _ref.container,
      resetProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  var lastIsShown = useRef();
  var store = noDelay ? fastScrollStore : scrollStore;
  return /*#__PURE__*/_jsx(Return, {
    store: store,
    initStates: ["scroll"],
    children: function children(_ref2) {
      var _ref2$scroll = _ref2.scroll,
          scrollInfo = _ref2$scroll === void 0 ? {} : _ref2$scroll;
      var activeId = store.getState().get("m" + scrollMargin);
      var scrollTop = scrollInfo.top;
      var pos = store.scroller.getOffset(targetId, store.storeName) || {};
      var isShown = lastIsShown.current || false;

      if (pos.isOnScreen) {
        isShown = true;
        lastIsShown.current = true;
      }

      var active = UNDEFINED !== typeof targetId && targetId === activeId;

      var targetInfo = _objectSpread(_objectSpread({}, pos), {}, {
        active: active,
        scrollTop: scrollTop,
        scrollInfo: scrollInfo,
        scrollMargin: scrollMargin,
        isShown: isShown,
        targetId: targetId
      });

      if (!isNaN(scrollMargin)) {
        store.scroller.addMargin(scrollMargin);
      }

      if (!container) {
        return /*#__PURE__*/_jsx(SemanticUI, _objectSpread(_objectSpread({}, resetProps), {}, {
          children: _children
        }));
      }

      var thisChildren = _children;

      if (!thisChildren && /*#__PURE__*/isValidElement(container)) {
        thisChildren = container.props.children;
      }

      return build(container)(_objectSpread(_objectSpread({}, resetProps), {}, {
        targetInfo: targetInfo
      }), thisChildren);
    }
  });
};

ScrollReceiver.displayName = "ScrollReceiver";
export default ScrollReceiver;