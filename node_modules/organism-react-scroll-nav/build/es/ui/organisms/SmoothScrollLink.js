import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutPropertiesLoose from "reshow-runtime/es/helpers/objectWithoutPropertiesLoose";
var _excluded = ["targetId", "scrollRefLoc", "scrollRefId", "scrollMargin", "style", "preventDefault", "noDelay"];
import React, { useEffect, useState, useCallback, useRef } from "react";
import smoothScrollTo from "smooth-scroll-to";
import getOffset from "getoffset";
import { doc } from "win-doc";
import { ScrollReceiver } from "../../src/index";
import scrollStore from "../../src/stores/scrollStore";
import fastScrollStore from "../../src/stores/fastScrollStore";
import { jsx as _jsx } from "react/jsx-runtime";
var scollTimer = null;

var resetTimer = function resetTimer() {
  if (scollTimer) {
    clearTimeout(scollTimer);
    scollTimer = false;
  }
};

var useSmoothScrollLink = function useSmoothScrollLink(props) {
  var targetId = props.targetId,
      _props$scrollRefLoc = props.scrollRefLoc,
      scrollRefLoc = _props$scrollRefLoc === void 0 ? "bottom" : _props$scrollRefLoc,
      _props$scrollRefId = props.scrollRefId,
      scrollRefId = _props$scrollRefId === void 0 ? "" : _props$scrollRefId,
      scrollMargin = props.scrollMargin,
      style = props.style,
      _props$preventDefault = props.preventDefault,
      preventDefault = _props$preventDefault === void 0 ? true : _props$preventDefault,
      _props$noDelay = props.noDelay,
      noDelay = _props$noDelay === void 0 ? false : _props$noDelay,
      others = _objectWithoutPropertiesLoose(props, _excluded);

  var _useState = useState(),
      scrollRefElement = _useState[0],
      setScrollRefElement = _useState[1];

  useEffect(function () {
    var oDoc = doc();

    if (!oDoc.__null) {
      var dom = oDoc.getElementById(scrollRefId);

      if (dom) {
        setScrollRefElement(dom);
      }
    }

    return function () {
      resetTimer();
    };
  });
  var getMargin = useCallback(function () {
    var ref = scrollRefElement;
    var margin = 0;

    if (ref) {
      var refOffset = getOffset(ref, false);

      switch (scrollRefLoc) {
        case "bottom":
          margin += refOffset.bottom - refOffset.top;
          break;

        default:
        case "top":
          break;
      }
    }

    if (!isNaN(scrollMargin)) {
      margin += scrollMargin;
    }

    margin--;
    return margin;
  }, [scrollRefLoc, scrollMargin, scrollRefElement]);

  var getStore = function getStore() {
    return noDelay ? fastScrollStore : scrollStore;
  };

  var handler = {
    click: function click(e) {
      var store = getStore();

      if (preventDefault) {
        e.preventDefault();
      }

      resetTimer();
      var offset = store.scroller.getOffset(targetId);

      if (offset) {
        var _margin = getMargin();

        scollTimer = true;
        smoothScrollTo(offset.top - _margin, null, null, function () {
          if (true !== scollTimer) {
            return;
          }

          scollTimer = setTimeout(function () {
            _margin = getMargin();
            offset = store.scroller.getOffset(targetId);
            smoothScrollTo(offset.top - _margin, 100);
          }, 500);
        });
      }
    }
  };
  var margin = getMargin();
  return {
    others: others,
    handler: handler,
    targetId: targetId,
    margin: margin,
    style: style
  };
};

var SmoothScrollLink = function SmoothScrollLink(props) {
  var _useSmoothScrollLink = useSmoothScrollLink(props),
      others = _useSmoothScrollLink.others,
      handler = _useSmoothScrollLink.handler,
      margin = _useSmoothScrollLink.margin,
      style = _useSmoothScrollLink.style,
      targetId = _useSmoothScrollLink.targetId;

  return /*#__PURE__*/_jsx(ScrollReceiver, _objectSpread(_objectSpread({
    atom: "a"
  }, others), {}, {
    targetId: targetId,
    scrollMargin: margin,
    style: _objectSpread(_objectSpread({}, Styles.link), style),
    onClick: handler.click
  }));
};

export default SmoothScrollLink;
var Styles = {
  link: {
    cursor: "pointer"
  }
};