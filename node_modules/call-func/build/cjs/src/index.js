"use strict";

var _interopRequireWildcard = require("reshow-runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "cleanAllRegister", {
  enumerable: true,
  get: function get() {
    return _register.cleanAllRegister;
  }
});
exports.isRequired = exports.defaultCall = exports["default"] = exports.debounce = void 0;
Object.defineProperty(exports, "register", {
  enumerable: true,
  get: function get() {
    return _register["default"];
  }
});
exports.throttle = void 0;

var _callfunc = _interopRequireDefault(require("./callfunc"));

var _register = _interopRequireWildcard(require("./register"));

var defaultCall = function defaultCall(defaultFunc, func, scope) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (0, _callfunc["default"])(func || defaultFunc, args, scope);
  };
};

exports.defaultCall = defaultCall;

var isRequired = function isRequired() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "param";
  throw new Error("".concat(name, " is required"));
};
/**
 * only run lasttime.
 */


exports.isRequired = isRequired;

var debounce = function debounce(func, defaultDelay) {
  var timer;
  return function (option) {
    var _ref = option || {},
        _ref$delay = _ref.delay,
        delay = _ref$delay === void 0 ? 250 : _ref$delay,
        args = _ref.args,
        scope = _ref.scope;

    clearTimeout(timer);
    timer = setTimeout(function () {
      return (0, _callfunc["default"])(func, args, scope);
    }, defaultDelay || delay);
  };
};
/**
 * reduce run times.
 */


exports.debounce = debounce;

var throttle = function throttle(func) {
  var threshhold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;
  var needRunLast = arguments.length > 2 ? arguments[2] : undefined;
  var waiting = false;
  var lastCall = false;

  var run = function run(option) {
    var _ref2 = option || {},
        args = _ref2.args,
        scope = _ref2.scope;

    lastCall = false;
    (0, _callfunc["default"])(func, args, scope);
  };

  return function (option) {
    lastCall = true;

    if (!waiting) {
      waiting = true;
      run(option);
      setTimeout(function () {
        waiting = false;

        if (needRunLast && lastCall) {
          run(option);
        }
      }, threshhold);
    }
  };
};

exports.throttle = throttle;
var _default = _callfunc["default"];
exports["default"] = _default;