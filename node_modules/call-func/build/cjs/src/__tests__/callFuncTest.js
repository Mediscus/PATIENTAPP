"use strict";

var _interopRequireWildcard = require("reshow-runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("reshow-runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("reshow-runtime/helpers/createClass"));

var _chai = require("chai");

var _index = _interopRequireWildcard(require("../index.js"));

describe("Test call func", function () {
  it("test call", function () {
    var check = false;

    var a = function a() {
      check = true;
    };

    (0, _index["default"])(a);
    (0, _chai.expect)(check).to.be["true"];
  });
  it("test call with params", function () {
    var check = false;

    var a = function a(p) {
      check = p;
    };

    var result = (0, _index["default"])(a, ["foo"]);
    (0, _chai.expect)(check).to.equal("foo");
    (0, _chai.expect)(result).to.equal(undefined);
  });
  it("test call with scope", function () {
    var check = false;

    var uObj = /*#__PURE__*/function () {
      function uObj() {
        (0, _classCallCheck2["default"])(this, uObj);
      }

      (0, _createClass2["default"])(uObj, [{
        key: "a",
        value: function a(p, hasThis) {
          check = p;

          if (hasThis) {
            (0, _chai.expect)(this).to.deep.equal({});
          } else {
            (0, _chai.expect)(this).to.be.undefined;
          }
        }
      }]);
      return uObj;
    }();

    var o = new uObj();
    (0, _index["default"])(o.a, ["foo", true], {});
    (0, _index["default"])(o.a, ["foo", false]);
  });
  it("test with return", function () {
    var func = function func() {
      for (var _len = arguments.length, p = new Array(_len), _key = 0; _key < _len; _key++) {
        p[_key] = arguments[_key];
      }

      return p;
    };

    (0, _chai.expect)((0, _index["default"])(func, ["foo", "bar"])).to.deep.equal(["foo", "bar"]);
  });
  it("test return null", function () {
    var actual1 = (0, _index["default"])('foo');
    (0, _chai.expect)(actual1).to.equal('foo');
    var actual2 = (0, _index["default"])('foo', null, null, null);
    (0, _chai.expect)(actual2).to.be["null"];
  });
  it("test return with non-func", function () {
    (0, _chai.expect)((0, _index["default"])(undefined)).to.be.undefined;
  });
});
describe("Test default call func", function () {
  var def = function def() {
    return "foo";
  };

  it("test default call", function () {
    var call1 = (0, _index.defaultCall)(def);
    var call2 = (0, _index.defaultCall)(def, function () {
      return "bar";
    });
    var call3 = (0, _index.defaultCall)(def, function (p) {
      return p;
    });
    var foo = call1();
    var bar = call2();
    var foobar = call3("foo-bar");
    (0, _chai.expect)(foo).to.equal("foo");
    (0, _chai.expect)(bar).to.equal("bar");
    (0, _chai.expect)(foobar).to.equal("foo-bar");
  });
});