"use strict";

var _typeof = require("reshow-runtime/helpers/typeof");

var _chai = require("chai");

var _index = _interopRequireWildcard(require("../index.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe("test cache reg", function () {
  var getRegString = function getRegString(name) {
    return "(([#?&])" + (0, _index["default"])(name) + "=)([^&#]*)";
  };

  it("get cache back", function () {
    var cache = {};

    var getCache = function getCache(name) {
      return (0, _index.cacheReg)(cache)(getRegString)(name);
    };

    var reg = getCache("foo");
    var exec = reg.exec("?foo=bar");
    (0, _chai.expect)(exec[3]).to.equal("bar");
    (0, _chai.expect)(cache["foo"]).to.not.be["null"];
  });
  it("tet flags", function () {
    var cache = {};

    var getCache = function getCache(name) {
      return (0, _index.cacheReg)(cache)(getRegString, "g")(name);
    };

    var reg = getCache("foo");
    var exec;
    var arr = [];
    var str = "?foo=&foo=1&foo=2";

    while (exec = reg.exec(str)) {
      arr.push(exec[3]);
    }

    (0, _chai.expect)(arr).to.deep.equal(["", "1", "2"]);
  });
});