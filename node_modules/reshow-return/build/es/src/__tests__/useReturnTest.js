import _slicedToArray from "reshow-runtime/es/helpers/slicedToArray";
import React from "react";
import { expect } from "chai";
import { Map, mergeMap } from "reshow-flux";
import { createReducer } from "reshow-flux-base";
import { mount } from "reshow-unit";
import useReturn from "../useReturn";
describe("Test return", function () {
  it("basic test", function () {
    var _createReducer = createReducer(function (state, ation) {
      return action;
    }, {
      foo: "bar"
    }),
        _createReducer2 = _slicedToArray(_createReducer, 2),
        store = _createReducer2[0],
        dispatch = _createReducer2[1];

    var Dom = function Dom(props) {
      var state = useReturn(["foo"], store);
      return state.foo;
    };

    var wrap = mount( /*#__PURE__*/React.createElement(Dom, null));
    expect(wrap.html()).to.equal("bar");
  });
  it("test default immutable", function () {
    var _createReducer3 = createReducer(function (state, ation) {
      return action;
    }, mergeMap(Map(), {
      m: {}
    })),
        _createReducer4 = _slicedToArray(_createReducer3, 2),
        store = _createReducer4[0],
        dispatch = _createReducer4[1];

    var Dom = function Dom(props) {
      var state = useReturn(["m"], store);
      expect(Map.isMap(state.m)).to.be["true"];
      expect(state.immutable).to.be["true"];
      return null;
    };

    var wrap = mount( /*#__PURE__*/React.createElement(Dom, null));
  });
  it("test default is not immutable", function () {
    var _createReducer5 = createReducer(function (state, ation) {
      return action;
    }, mergeMap(Map(), {
      m: {}
    })),
        _createReducer6 = _slicedToArray(_createReducer5, 2),
        store = _createReducer6[0],
        dispatch = _createReducer6[1];

    var Dom = function Dom(props) {
      var state = useReturn(["m"], store, {
        immutable: false
      });
      expect(Map.isMap(state.m)).to.be["false"];
      expect(state.immutable).to.be.undefined;
      return null;
    };

    var wrap = mount( /*#__PURE__*/React.createElement(Dom, null));
  });
});