import _extends from "reshow-runtime/es/helpers/extends";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _slicedToArray from "reshow-runtime/es/helpers/slicedToArray";
var _excluded = ["store", "initStates", "pathStates"];

var _div, _div2;

import React, { PureComponent } from "react";
import { ImmutableStore, mergeMap } from "reshow-flux";
import { expect } from "chai";
import { mount, cleanIt } from "reshow-unit";
import Return from "../Return";

var _ImmutableStore = ImmutableStore(function (state, action) {
  switch (action.type) {
    case "config/reset":
      return mergeMap(state.clear(), action.params);

    default:
      if (Object.keys(action)) {
        return mergeMap(state, action);
      } else {
        return state;
      }

  }
}),
    _ImmutableStore2 = _slicedToArray(_ImmutableStore, 2),
    pageStore = _ImmutableStore2[0],
    dispatch = _ImmutableStore2[1];

describe("Test Return", function () {
  var _FakeComponent, _FakeComponent2, _FakeComponent3, _FakeComponent4;

  var TestEl = /*#__PURE__*/function (_PureComponent) {
    _inherits(TestEl, _PureComponent);

    var _super = _createSuper(TestEl);

    function TestEl() {
      _classCallCheck(this, TestEl);

      return _super.apply(this, arguments);
    }

    _createClass(TestEl, [{
      key: "render",
      value: function render() {
        return _div || (_div = /*#__PURE__*/React.createElement("div", null));
      }
    }]);

    return TestEl;
  }(PureComponent);

  var FakeComponent = /*#__PURE__*/function (_PureComponent2) {
    _inherits(FakeComponent, _PureComponent2);

    var _super2 = _createSuper(FakeComponent);

    function FakeComponent() {
      var _this;

      _classCallCheck(this, FakeComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super2.call.apply(_super2, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "state", {
        store: pageStore,
        initStates: ["data"],
        pathStates: {
          I13N: ["data", "I13N"]
        }
      });

      return _this;
    }

    _createClass(FakeComponent, [{
      key: "setNew",
      value: function setNew(k, v) {
        this.setState(_defineProperty({}, k, v));
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _this$state = this.state,
            store = _this$state.store,
            initStates = _this$state.initStates,
            pathStates = _this$state.pathStates,
            otherState = _objectWithoutProperties(_this$state, _excluded);

        return /*#__PURE__*/React.createElement(Return, _extends({
          changeable: true,
          store: store,
          initStates: initStates,
          pathStates: pathStates
        }, this.props), /*#__PURE__*/React.createElement(TestEl, _extends({
          ref: function ref(el) {
            return _this2.el = el;
          }
        }, otherState)));
      }
    }]);

    return FakeComponent;
  }(PureComponent);

  var reset;
  beforeEach(function () {
    dispatch("config/reset");
  });
  afterEach(function () {
    cleanIt();
  });
  it("assign props", function (done) {
    var wrap = mount(_FakeComponent || (_FakeComponent = /*#__PURE__*/React.createElement(FakeComponent, null)));
    var uFake = wrap.instance();
    dispatch({
      data: {
        foo: "bar",
        I13N: {
          aaa: "bbb"
        }
      }
    });
    setTimeout(function () {
      expect(uFake.el.props.data).to.deep.equal({
        foo: "bar",
        I13N: {
          aaa: "bbb"
        }
      });
      expect(uFake.el.props.I13N).to.deep.equal({
        aaa: "bbb"
      });
      uFake.setNew("pathStates", {
        foo: ["data", "foo"]
      });
      setTimeout(function () {
        expect(uFake.el.props.foo).to.equal("bar");
        done();
      });
    });
  });
  it("test Immutable path state", function (done) {
    var vDom = _FakeComponent2 || (_FakeComponent2 = /*#__PURE__*/React.createElement(FakeComponent, {
      immutable: true
    }));

    var wrap = mount(vDom);
    var uFake = wrap.instance();
    dispatch({
      data: {
        foo: "bar",
        I13N: {
          a: "b"
        }
      }
    });
    setTimeout(function () {
      var firstData = uFake.el.props.data;
      var firstI13N = uFake.el.props.I13N;
      uFake.setNew("bar", "bbb");
      var secondData = uFake.el.props.data;
      var secondI13N = uFake.el.props.I13N;
      expect(firstData === secondData).to.be["true"];
      expect(firstI13N === secondI13N).to.be["true"];
      expect(firstData.toJS()).to.deep.equal({
        foo: "bar",
        I13N: {
          a: "b"
        }
      });
      expect(firstI13N.toJS()).to.deep.equal({
        a: "b"
      });
      done();
    });
  });
  it("test path state should clean", function () {
    var wrap = mount(_FakeComponent3 || (_FakeComponent3 = /*#__PURE__*/React.createElement(FakeComponent, {
      immutable: true
    })));
    var uFake = wrap.instance();
    dispatch({
      data: ""
    });
    expect(uFake.el.props.I13N).to.undefined;
    var wrap1 = mount(_FakeComponent4 || (_FakeComponent4 = /*#__PURE__*/React.createElement(FakeComponent, null)));
    var uFake1 = wrap1.instance();
    expect(uFake1.el.props.I13N).to.undefined;
  });
  it("test child with function", function (done) {
    var i = 0;
    var vDom = /*#__PURE__*/React.createElement(Return, {
      store: pageStore,
      initStates: ["data"]
    }, function (props) {
      if (i && props.data) {
        expect(props).to.deep.equal({
          data: "foo"
        });
        done();
      } else {
        i++;
      }

      return _div2 || (_div2 = /*#__PURE__*/React.createElement("div", null));
    });
    var wrap = mount(vDom);
    dispatch({
      data: "foo"
    });
  });
});