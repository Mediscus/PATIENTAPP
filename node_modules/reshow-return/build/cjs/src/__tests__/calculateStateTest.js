"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("reshow-runtime/helpers/slicedToArray"));

var _chai = require("chai");

var _reshowFlux = require("reshow-flux");

var _connectOptions = _interopRequireDefault(require("../connectOptions"));

var calculateState = _connectOptions["default"].calculateState;
describe("Test calculateState", function () {
  var pageStore;
  beforeEach(function () {
    var _ImmutableStore = (0, _reshowFlux.ImmutableStore)(function (state, action) {
      switch (action.type) {
        case "config/reset":
          return (0, _reshowFlux.mergeMap)(state.clear(), action.params);

        default:
          if (Object.keys(action)) {
            return (0, _reshowFlux.mergeMap)(state, action);
          } else {
            return state;
          }

      }
    }),
        _ImmutableStore2 = (0, _slicedToArray2["default"])(_ImmutableStore, 2),
        store = _ImmutableStore2[0],
        dispatch = _ImmutableStore2[1];

    dispatch("config/reset", {
      foo: {
        bar: {
          foo1: "bar1"
        }
      }
    });
    pageStore = store;
  });
  it("path data with immutable", function () {
    var actual = calculateState({}, {
      initStates: ["foo"],
      pathStates: {
        bar: ["foo", "bar"]
      },
      immutable: true,
      storeState: pageStore.getState()
    });
    (0, _chai.expect)(actual.bar instanceof _reshowFlux.Map).to.be["true"];
  });
  it("path data with immutable not exits", function () {
    var acture = calculateState({}, {
      pathStates: {
        bar: ["foo", "bar"]
      },
      immutable: true,
      storeState: pageStore.getState()
    });
    (0, _chai.expect)(acture.bar).to.be.undefined;
  });
  it("path data with non immutable", function () {
    var acture = calculateState({}, {
      initStates: ["foo"],
      pathStates: {
        bar: ["foo", "bar"]
      },
      storeState: pageStore.getState()
    });
    (0, _chai.expect)(acture.bar).to.deep.equal({
      foo1: "bar1"
    });
  });
});