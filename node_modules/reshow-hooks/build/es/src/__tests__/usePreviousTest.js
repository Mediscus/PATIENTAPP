import _classCallCheck from "reshow-runtime/es/helpers/classCallCheck";
import _createClass from "reshow-runtime/es/helpers/createClass";
import _assertThisInitialized from "reshow-runtime/es/helpers/assertThisInitialized";
import _inherits from "reshow-runtime/es/helpers/inherits";
import _createSuper from "reshow-runtime/es/helpers/createSuper";
import _defineProperty from "reshow-runtime/es/helpers/defineProperty";
import React, { Component } from "react";
import { expect } from "chai";
import { mount } from "reshow-unit";
import usePrevious from "../usePrevious";
describe("test usePrevious", function () {
  it("basic test", function () {
    var hackGlobal;

    var Foo = function Foo(props) {
      var prev = usePrevious(props.v);

      hackGlobal = function hackGlobal() {
        return {
          v: props.v,
          prev: prev
        };
      };

      return null;
    };

    var Comp = /*#__PURE__*/function (_Component) {
      _inherits(Comp, _Component);

      var _super = _createSuper(Comp);

      function Comp() {
        var _this;

        _classCallCheck(this, Comp);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        _defineProperty(_assertThisInitialized(_this), "state", {
          v: null
        });

        return _this;
      }

      _createClass(Comp, [{
        key: "setV",
        value: function setV(v) {
          this.setState({
            v: v
          });
        }
      }, {
        key: "render",
        value: function render() {
          return /*#__PURE__*/React.createElement(Foo, {
            v: this.state.v
          });
        }
      }]);

      return Comp;
    }(Component);

    var wrap = mount( /*#__PURE__*/React.createElement(Comp, null));
    expect(hackGlobal()).to.deep.equal({
      v: null,
      prev: undefined
    });
    wrap.instance().setV("bar");
    expect(hackGlobal()).to.deep.equal({
      v: "bar",
      prev: null
    });
  });
});