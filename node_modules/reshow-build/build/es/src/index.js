import _typeof from "reshow-runtime/es/helpers/typeof";
import React, { isValidElement, cloneElement, createElement, Children } from "react";
import { STRING, FUNCTION, T_NULL, T_TRUE, TYPE_ERROR } from "reshow-constant";
import { removeEmpty } from "array.merge";

var buildFunc = function buildFunc(component, props, child, componentOption) {
  // anonymous function will call directly
  var _ref = componentOption || {},
      wrap = _ref.wrap,
      doCallFunction = _ref.doCallFunction;

  if (FUNCTION === _typeof(component) && !component.name || doCallFunction) {
    try {
      if (child != T_NULL) {
        props.children = child;
      }

      var el = component(props);
      return wrap && ! /*#__PURE__*/isValidElement(el) ? buildReact(wrap, props, el) : el;
    } catch (e) {
      if (e.name === TYPE_ERROR) {
        return buildReact(component, props, child);
      } else {
        throw e;
      }
    }
  } else {
    return buildReact(component, props, child);
  }
};

var buildReact = function buildReact(component, props, child) {
  var params = [component, props];

  if (child != T_NULL) {
    params.push(child);
  }

  if (STRING === _typeof(component) && component !== component.replace(/[^a-z]/g, "")) {
    return buildReact( /*#__PURE__*/React.createElement("span", null, component), props, child);
  } else {
    return ( /*#__PURE__*/isValidElement(component) ? cloneElement : createElement).apply(T_NULL, params);
  }
};

var build = function build(component, componentOption) {
  return function (props, child) {
    if (!component) {
      return T_NULL;
    }

    var _ref2 = componentOption || {},
        wrap = _ref2.wrap,
        doCallFunction = _ref2.doCallFunction;

    if (wrap) {
      if (FUNCTION !== _typeof(component) && ! /*#__PURE__*/isValidElement(component)) {
        child = component;
        component = wrap;
      }
    }

    props = removeEmpty(props, T_TRUE);

    if (component.map) {
      delete props.key;
    }

    var run = function run(comp) {
      return ( /*#__PURE__*/isValidElement(comp) ? buildReact : buildFunc)(comp, props, child, componentOption);
    };

    return component.map ? Children.map(component.map(function (comp) {
      return run(comp);
    }), function (c) {
      return c;
    }) : run(component);
  };
};

export default build;