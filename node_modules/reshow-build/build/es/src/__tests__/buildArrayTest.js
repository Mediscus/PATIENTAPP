import _toConsumableArray from "reshow-runtime/es/helpers/toConsumableArray";

var _div, _div2, _div3, _div4, _div5, _div6, _div7, _div8, _div9, _div10, _i, _span, _span2, _span3;

import React, { isValidElement, Children } from "react";
import { expect } from "chai";
import { shallow } from "reshow-unit";
import build from "../index";
describe("Test build array", function () {
  it("test with multi children", function () {
    var FakeDom = function FakeDom(_ref) {
      var children = _ref.children;
      return /*#__PURE__*/React.createElement("div", null, build(children)({
        title: "foo"
      }));
    };

    var vDom = /*#__PURE__*/React.createElement(FakeDom, null, _div || (_div = /*#__PURE__*/React.createElement("div", null, "1")), _div2 || (_div2 = /*#__PURE__*/React.createElement("div", null, "2")));
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal('<div><div title="foo">1</div><div title="foo">2</div></div>');
  });
  it("test with multi function", function () {
    var FakeDom = function FakeDom(_ref2) {
      var children = _ref2.children;
      expect(Children.count(children)).to.equal(2);
      return /*#__PURE__*/React.createElement("div", null, build(children)({
        foo: _div3 || (_div3 = /*#__PURE__*/React.createElement("div", null, "foo")),
        bar: _div4 || (_div4 = /*#__PURE__*/React.createElement("div", null, "bar"))
      }));
    };

    var vDom = /*#__PURE__*/React.createElement(FakeDom, null, function (_ref3) {
      var foo = _ref3.foo;
      return foo;
    }, _div5 || (_div5 = /*#__PURE__*/React.createElement("div", null)), _div6 || (_div6 = /*#__PURE__*/React.createElement("div", null)), function (_ref4) {
      var bar = _ref4.bar;
      return bar;
    });
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal('<div><div>foo</div><div foo="[object Object]" bar="[object Object]"></div><div foo="[object Object]" bar="[object Object]"></div><div>bar</div></div>');
  });
  it("test with multi Component instance", function () {
    var FakeDom = function FakeDom(_ref5) {
      var children = _ref5.children;
      expect(Children.count(children)).to.equal(2);
      return /*#__PURE__*/React.createElement("div", null, build(children)({
        foo: _div7 || (_div7 = /*#__PURE__*/React.createElement("div", null, "foo")),
        bar: _div8 || (_div8 = /*#__PURE__*/React.createElement("div", null, "bar"))
      }));
    };

    var A = function A(_ref6) {
      var foo = _ref6.foo;
      return foo;
    };

    var B = function B(_ref7) {
      var bar = _ref7.bar;
      return bar;
    };

    var vDom = /*#__PURE__*/React.createElement(FakeDom, null, A, _div9 || (_div9 = /*#__PURE__*/React.createElement("div", null)), _div10 || (_div10 = /*#__PURE__*/React.createElement("div", null)), B);
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal('<div><div>foo</div><div foo="[object Object]" bar="[object Object]"></div><div foo="[object Object]" bar="[object Object]"></div><div>bar</div></div>');
  });
  it("test with sub array", function () {
    var FakeDom = function FakeDom(_ref8) {
      var children = _ref8.children;
      var arr = [_i || (_i = /*#__PURE__*/React.createElement("i", null))].concat(_toConsumableArray(Children.map(children, function (c) {
        return c;
      }) || []));
      return /*#__PURE__*/React.createElement("div", null, build(arr)({
        "data-foo": "bar"
      }));
    };

    var vDom = /*#__PURE__*/React.createElement(FakeDom, null, _span || (_span = /*#__PURE__*/React.createElement("span", null)), _span2 || (_span2 = /*#__PURE__*/React.createElement("span", null)));
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal('<div><i data-foo="bar"></i><span data-foo="bar"></span><span data-foo="bar"></span></div>');
    var vDom2 = /*#__PURE__*/React.createElement(FakeDom, null, _span3 || (_span3 = /*#__PURE__*/React.createElement("span", null)));
    var wrap2 = shallow(vDom2);
    expect(wrap2.html()).to.equal('<div><i data-foo="bar"></i><span data-foo="bar"></span></div>');
    var vDom3 = /*#__PURE__*/React.createElement(FakeDom, null);
    var wrap3 = shallow(vDom3);
    expect(wrap3.html()).to.equal('<div><i data-foo="bar"></i></div>');
  });
});