import { expect } from "chai";
import { UNDEFINED, FUNCTION, OBJECT, DEFAULT, STRING, SYMBOL, SCRIPT, TYPE_ERROR, T_UNDEFINED, T_NULL, T_TRUE, T_FALSE, KEYS, IS_ARRAY } from "../index";
describe("Test Constant", function () {
  it("test undefined", function () {
    expect(UNDEFINED).to.equal("undefined");
  });
  it("test function", function () {
    expect(FUNCTION).to.equal("function");
  });
  it("test object", function () {
    expect(OBJECT).to.equal("object");
  });
  it("test default", function () {
    expect(DEFAULT).to.equal("default");
  });
  it("test string", function () {
    expect(STRING).to.equal("string");
  });
  it("test symbol", function () {
    expect(SYMBOL).to.equal("symbol");
  });
  it("test script", function () {
    expect(SCRIPT).to.equal("script");
  });
  it("test TYPE_ERROR", function () {
    expect(TYPE_ERROR).to.equal("TypeError");
  });
});
describe("Test Type", function () {
  it("test type undefined", function () {
    expect(T_UNDEFINED).to.be.undefined;
  });
  it("test type null", function () {
    expect(T_NULL).to.be["null"];
  });
  it("test type true", function () {
    expect(T_TRUE).to.be["true"];
  });
  it("test type false", function () {
    expect(T_FALSE).to.be["false"];
  });
});
describe("Test FUNCTION", function () {
  it("test keys", function () {
    var a = {
      foo: "bar"
    };
    expect(KEYS(a)).to.deep.equal(["foo"]);
  });
  it("test isArray", function () {
    var a = ["foo"];
    expect(IS_ARRAY(a)).to.be["true"];
  });
  it("test is not Array", function () {
    var a = {
      foo: "bar"
    };
    expect(IS_ARRAY(a)).to.be["false"];
  });
});