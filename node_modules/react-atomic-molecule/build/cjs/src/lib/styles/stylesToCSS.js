"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _hyphenateStyleName = _interopRequireDefault(require("hyphenate-style-name"));

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _reshowConstant = require("reshow-constant");

var _replicateSelector = _interopRequireDefault(require("./replicateSelector"));

// Follows syntax at https://developer.mozilla.org/en-US/docs/Web/CSS/content,
// including multiple space separated values.
var unquotedContentValueRegex = /^(normal|none|(\b(url\([^)]*\)|chapter_counter|attr\([^)]*\)|(no-)?(open|close)-quote|inherit)((\b\s*)|$|\s+))+)$/;
var browsers = ["webkit", "moz"];

var buildRule = function buildRule(key, value) {
  if (null == value) {
    return "";
  }

  if (key === "content" && !unquotedContentValueRegex.test(value)) {
    value = "'" + value.replace(/'/g, "\\'") + "'";
  }

  return (0, _hyphenateStyleName["default"])(key) + ": " + value + ";";
};

var buildRules = function buildRules(result, styleId, selector) {
  var rules = (0, _getObjectValue["default"])(result.styleIds, [styleId, "style"], []);

  if (!rules.length) {
    return result;
  }

  var parentSelector;

  if ((0, _reshowConstant.IS_ARRAY)(selector)) {
    parentSelector = selector[0].trim();
    selector.shift();
  } else {
    selector = [selector];
  }

  var myRules = [];
  rules.forEach(function (rule, i) {
    var mycss = "";
    /**
     * if selector[i] is array will conver to string here.
     * Such [".foo", ".bar"] will conver to .foo,.bar
     */

    mycss += selector[i] + " {";
    (0, _reshowConstant.KEYS)(rule).forEach(function (styleKey) {
      if (rule[styleKey] && rule[styleKey].forEach) {
        rule[styleKey].forEach(function (item) {
          return mycss += buildRule(styleKey, item);
        });
      } else {
        mycss += buildRule(styleKey, rule[styleKey]);
      }
    });
    mycss += "}";
    myRules.push(mycss);
  });
  var myRule = myRules.join("\n");

  if (parentSelector) {
    var mycssArr = [parentSelector + " {\n" + myRule + "\n}\n"];
    var keyframesString = "@keyframes";

    if (0 === parentSelector.indexOf(keyframesString)) {
      browsers.forEach(function (browser) {
        mycssArr.push(parentSelector.replace(keyframesString, "@-" + browser + "-keyframes") + " {\n" + myRule + "\n}\n");
      });
    }

    myRule = mycssArr.join("\n");
  }

  result.cssArr[styleId] = myRule;
  result.css += myRule;
  return result;
};

var buildStyle = function buildStyle(result, oStyle) {
  var styleId = oStyle.styleId;

  if (!styleId || result.styleIds[styleId]) {
    return;
  }

  var selector = oStyle.selector;

  if (selector) {
    if ((0, _reshowConstant.IS_ARRAY)(selector) && !selector[1]) {
      selector[1] = (0, _replicateSelector["default"])(styleId);
    }
  } else {
    selector = (0, _replicateSelector["default"])(styleId);
  }

  result.styleIds[styleId] = oStyle; //for check already inject

  buildRules(result, styleId, selector);
};

var stylesToCSS = function stylesToCSS(styles) {
  var _styles;

  if (!(0, _reshowConstant.IS_ARRAY)(styles) && styles) {
    styles = [styles];
  }

  var result = {
    css: "",
    styleIds: {},
    cssArr: {}
  };
  (_styles = styles) === null || _styles === void 0 ? void 0 : _styles.forEach(function (style) {
    return buildStyle(result, style);
  });
  return result;
};

var _default = stylesToCSS;
exports["default"] = _default;
module.exports = exports.default;