"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

var _typeof = require("reshow-runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("reshow-runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classLib = require("class-lib");

var _SemanticUI = _interopRequireDefault(require("../molecules/SemanticUI"));

var _useCSS = _interopRequireDefault(require("../../src/useCSS"));

var _excluded = ["type", "className", "children", "horizontal"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var renderChildren = function renderChildren(children, pAtom, horizontal) {
  return _react.Children.map(children, function (child) {
    if (!child) {
      return null;
    }

    if ("ul" === pAtom || "ol" === pAtom) {
      child = /*#__PURE__*/(0, _react.cloneElement)(child, {
        atom: "li"
      });
    } else if ("table" === pAtom) {
      child = /*#__PURE__*/(0, _react.cloneElement)(child, {
        atom: "td"
      });

      if (!horizontal) {
        child = /*#__PURE__*/_react["default"].createElement("tr", null, child);
      }
    }

    return child;
  });
};

var List = function List(props) {
  (0, _useCSS["default"])(["list"], "semantic");
  /**
   * Why need type?
   *
   * List not the only type, such as segments.
   * https://semantic-ui.com/elements/segment.html#raised-segments
   *
   */

  var _props$type = props.type,
      type = _props$type === void 0 ? "list" : _props$type,
      className = props.className,
      children = props.children,
      horizontal = props.horizontal,
      others = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var atom = props.atom;
  var classes = (0, _classLib.mixClass)(className, type, {
    horizontal: horizontal
  });
  var child = renderChildren(children, atom, horizontal);

  if (atom === "table") {
    if (child) {
      if (horizontal) {
        child = /*#__PURE__*/_react["default"].createElement("tbody", null, /*#__PURE__*/_react["default"].createElement("tr", null, child));
      } else {
        child = /*#__PURE__*/_react["default"].createElement("tbody", null, child);
      }
    }
  }

  return /*#__PURE__*/_react["default"].createElement(_SemanticUI["default"], (0, _extends2["default"])({}, others, {
    className: classes
  }), child);
};

var _default = List;
exports["default"] = _default;
module.exports = exports.default;