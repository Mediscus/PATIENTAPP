"use strict";

var _interopRequireDefault = require("reshow-runtime/helpers/interopRequireDefault");

var _typeof = require("reshow-runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("reshow-runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("reshow-runtime/helpers/objectSpread2"));

var _objectWithoutProperties2 = _interopRequireDefault(require("reshow-runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _classLib = require("class-lib");

var _getObjectValue = _interopRequireDefault(require("get-object-value"));

var _SemanticUI2 = _interopRequireDefault(require("../molecules/SemanticUI"));

var _Message = _interopRequireDefault(require("../molecules/Message"));

var _Label = _interopRequireDefault(require("../molecules/Label"));

var _useCSS = _interopRequireDefault(require("../../src/useCSS"));

var _SemanticUI;

var _excluded = ["className", "fieldClassName", "fieldStyle", "fieldStyles", "fieldProps", "children", "inline", "type", "inputComponent", "inputWrapper", "inputWrapperAttr", "label", "labelStyle", "labelStyles", "labelWrap", "style", "styles", "styleOrder", "required", "messageType", "messageProps", "message", "topTip", "bottomTip", "rightTip"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Field = function Field(props) {
  (0, _useCSS["default"])(["input", "search", "form"], "semantic");
  var className = props.className,
      fieldClassName = props.fieldClassName,
      fieldStyle = props.fieldStyle,
      fieldStyles = props.fieldStyles,
      fieldProps = props.fieldProps,
      children = props.children,
      inline = props.inline,
      type = props.type,
      inputComponent = props.inputComponent,
      inputWrapper = props.inputWrapper,
      inputWrapperAttr = props.inputWrapperAttr,
      label = props.label,
      labelStyle = props.labelStyle,
      labelStyles = props.labelStyles,
      labelWrap = props.labelWrap,
      style = props.style,
      styles = props.styles,
      styleOrder = props.styleOrder,
      required = props.required,
      messageType = props.messageType,
      messageProps = props.messageProps,
      message = props.message,
      topTip = props.topTip,
      bottomTip = props.bottomTip,
      rightTip = props.rightTip,
      others = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var isGroup = !(props.atom || inputComponent);
  var classes = (0, _classLib.mixClass)(fieldClassName, {
    "label-wrap": labelWrap,
    required: !!required,
    field: !isGroup,
    fields: isGroup,
    inline: !!inline,
    info: messageType === "info",
    error: messageType === "error",
    success: messageType === "success",
    warning: messageType === "warning"
  });
  var oLabel = null;
  var thisMessageProps = messageProps || {};

  if (label) {
    var thisLabelStyle = (0, _objectSpread2["default"])({}, (0, _getObjectValue["default"])(labelStyle, null, {}));

    if (props.id) {
      thisLabelStyle.cursor = "pointer";
    }

    if (labelWrap) {
      thisLabelStyle.flex = "0 1 100%";
      thisMessageProps.style = (0, _objectSpread2["default"])({}, thisMessageProps.style);
      thisMessageProps.style.flex = "0 1 100%";
    }

    oLabel = /*#__PURE__*/_react["default"].createElement(_SemanticUI2["default"], {
      atom: "label",
      key: "label",
      htmlFor: props.id,
      style: thisLabelStyle,
      styles: labelStyles,
      styleOrder: styleOrder,
      title: label
    }, label);
  }

  var input = null;
  var thisFieldStyles = fieldStyles;
  var thisFieldStyle = fieldStyle;
  var thisChildren = children;

  if (isGroup) {
    if (!thisFieldStyles) {
      thisFieldStyles = styles;
    }

    if (!thisFieldStyle) {
      thisFieldStyle = (0, _objectSpread2["default"])({}, style);
    } else {
      thisFieldStyle = (0, _objectSpread2["default"])({}, thisFieldStyle);
    }

    if (label && labelWrap) {
      thisFieldStyle.flexWrap = "wrap";
    }
  } else {
    var isSelect = "select" === props.atom;
    input = inputComponent ? inputComponent : _SemanticUI || (_SemanticUI = /*#__PURE__*/_react["default"].createElement(_SemanticUI2["default"], null));
    var inputProps = (0, _getObjectValue["default"])(input, ["props"], {}); // set inputChildren

    var inputChildren = inputProps.children || null;

    if (isSelect) {
      thisChildren = null;
      inputChildren = children;
    }

    var inputClasses = (0, _classLib.mixClass)(className, inputProps.className, {
      dropdown: isSelect
    });
    input = /*#__PURE__*/(0, _react.cloneElement)(input, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, others), {}, {
      style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
        boxSizing: "inherit"
      }, (0, _getObjectValue["default"])(input, ["props", "style"])), style),
      key: "input",
      className: inputClasses,
      styles: styles,
      styleOrder: styleOrder,
      required: required,
      type: type
    }), inputChildren);
  }

  var topTipEl;

  if (topTip) {
    topTipEl = /*#__PURE__*/_react["default"].createElement(_Label["default"], {
      key: "topTip",
      className: "pointing below prompt"
    }, topTip);
  }

  var inputs;

  if ("checkbox" === type || "radio" === type) {
    inputs = [topTipEl, input, oLabel];
  } else {
    inputs = [oLabel, topTipEl, input];
  }

  if (inputWrapper) {
    inputs = /*#__PURE__*/(0, _react.cloneElement)(inputWrapper, inputWrapperAttr, inputs);
  }

  var messageEl;
  var bottomTipEl;
  var rightTipEl;

  if (message) {
    messageEl = /*#__PURE__*/_react["default"].createElement(_Message["default"], (0, _extends2["default"])({
      messageType: messageType
    }, thisMessageProps), message);
  }

  if (bottomTip) {
    bottomTipEl = /*#__PURE__*/_react["default"].createElement(_Label["default"], {
      className: "above pointing prompt"
    }, bottomTip);
  }

  if (rightTip) {
    rightTipEl = /*#__PURE__*/_react["default"].createElement(_Label["default"], {
      className: "left pointing prompt"
    }, rightTip);
  } // init FieldStyle boxSizing


  thisFieldStyle = (0, _objectSpread2["default"])({}, thisFieldStyle);

  if (!thisFieldStyle.boxSizing) {
    thisFieldStyle.boxSizing = "inherit";
  }

  return /*#__PURE__*/_react["default"].createElement(_SemanticUI2["default"], (0, _extends2["default"])({}, fieldProps, {
    className: classes,
    style: thisFieldStyle,
    styles: thisFieldStyles,
    styleOrder: styleOrder
  }), inputs, thisChildren, rightTipEl, bottomTipEl, messageEl);
};

var _default = Field;
exports["default"] = _default;
module.exports = exports.default;