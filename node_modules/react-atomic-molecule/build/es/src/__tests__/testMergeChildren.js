var _i, _span, _span2, _i2, _span3, _i3, _i4, _i5;

import { expect } from "chai";
import React from "react";
import { shallow } from "reshow-unit";
import mergeChildren from "../mergeChildren";
describe("Test merge default value", function () {
  it("basic test", function () {
    var FakeDom = function FakeDom(_ref) {
      var children = _ref.children;
      return /*#__PURE__*/React.createElement("div", null, mergeChildren(_i || (_i = /*#__PURE__*/React.createElement("i", {
        key: "i"
      })), children));
    };

    var vDom = /*#__PURE__*/React.createElement(FakeDom, null, _span || (_span = /*#__PURE__*/React.createElement("span", null)), _span2 || (_span2 = /*#__PURE__*/React.createElement("span", null)));
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal("<div><i></i><span></span><span></span></div>");
  });
  it("test append", function () {
    var FakeDom = function FakeDom(_ref2) {
      var children = _ref2.children;
      return /*#__PURE__*/React.createElement("div", null, mergeChildren(_i2 || (_i2 = /*#__PURE__*/React.createElement("i", {
        key: "i"
      })), children, true));
    };

    var vDom = /*#__PURE__*/React.createElement(FakeDom, null, _span3 || (_span3 = /*#__PURE__*/React.createElement("span", null)));
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal("<div><span></span><i></i></div>");
  });
  it("test empty children", function () {
    var FakeDom = function FakeDom(_ref3) {
      var children = _ref3.children;
      return /*#__PURE__*/React.createElement("div", null, mergeChildren(_i3 || (_i3 = /*#__PURE__*/React.createElement("i", {
        key: "i"
      })), children));
    };

    var vDom = /*#__PURE__*/React.createElement(FakeDom, null);
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal("<div><i></i></div>");
  });
  it("test merge twice", function () {
    var FakeDom = function FakeDom(_ref4) {
      var children = _ref4.children;
      return /*#__PURE__*/React.createElement("div", null, mergeChildren(_i4 || (_i4 = /*#__PURE__*/React.createElement("i", null)), mergeChildren(_i5 || (_i5 = /*#__PURE__*/React.createElement("i", null)), children)));
    };

    var vDom = /*#__PURE__*/React.createElement(FakeDom, null);
    var wrap = shallow(vDom);
    expect(wrap.html()).to.equal("<div><i></i><i></i></div>");
  });
});