import _extends from "reshow-runtime/es/helpers/extends";
import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["show", "isModal", "center", "content", "className", "children", "contentStyle"];

/* jshint esnext: true */
import React from "react";
import { mixClass } from "class-lib";
import Content from "../molecules/Content";
import SemanticUI from "../molecules/SemanticUI";
import useCSS from "../../src/useCSS";

var Dimmer = function Dimmer(props) {
  useCSS(["dimmer"], "semantic");

  var _props$show = props.show,
      show = _props$show === void 0 ? false : _props$show,
      _props$isModal = props.isModal,
      isModal = _props$isModal === void 0 ? false : _props$isModal,
      _props$center = props.center,
      center = _props$center === void 0 ? true : _props$center,
      _props$content = props.content,
      content = _props$content === void 0 ? true : _props$content,
      className = props.className,
      children = props.children,
      contentStyle = props.contentStyle,
      others = _objectWithoutProperties(props, _excluded);

  if (!show) {
    return null;
  }

  var classes = mixClass(className, "transition visible active", {
    dimmer: !isModal,
    modal: isModal
  });
  var child;

  if (center && content) {
    child = /*#__PURE__*/React.createElement(Content, {
      style: _objectSpread({
        boxSizing: "inherit"
      }, contentStyle)
    }, children);
  } else {
    child = children;
  }

  return /*#__PURE__*/React.createElement(SemanticUI, _extends({}, others, {
    className: classes
  }), child);
};

export default Dimmer;