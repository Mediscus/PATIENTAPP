import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _extends from "reshow-runtime/es/helpers/extends";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["button", "actionProps", "icon", "className", "children", "messageType", "leftLabel", "leftLabelProps", "rightLabel", "rightLabelProps", "style", "transparent", "inputStyle"];
import React from "react";
import { mixClass } from "class-lib";
import SemanticUI from "../molecules/SemanticUI";
import Button from "../molecules/Button";
import Label from "../molecules/Label";
import Icon from "../molecules/Icon";
import useCSS from "../../src/useCSS";
import useLazyInject from "../../src/lib/styles/useLazyInject";

var InputBox = function InputBox(props) {
  injects = useLazyInject(InjectStyles, injects);
  useCSS(["input", "search", "form"], "semantic");

  var _props$button = props.button,
      button = _props$button === void 0 ? "Submit" : _props$button,
      _props$actionProps = props.actionProps,
      actionProps = _props$actionProps === void 0 ? {} : _props$actionProps,
      icon = props.icon,
      className = props.className,
      children = props.children,
      messageType = props.messageType,
      leftLabel = props.leftLabel,
      leftLabelProps = props.leftLabelProps,
      rightLabel = props.rightLabel,
      rightLabelProps = props.rightLabelProps,
      style = props.style,
      transparent = props.transparent,
      inputStyle = props.inputStyle,
      others = _objectWithoutProperties(props, _excluded);

  var classes = mixClass(className, messageType, "input", {
    labeled: leftLabel || rightLabel,
    right: rightLabel,
    action: button && !icon,
    icon: icon,
    transparent: transparent
  });
  var thisLeftLabel;

  if (leftLabel) {
    thisLeftLabel = /*#__PURE__*/React.createElement(Label, leftLabelProps, leftLabel);
  }

  var thisRightLabel;

  if (rightLabel) {
    thisRightLabel = /*#__PURE__*/React.createElement(Label, _extends({
      style: Styles.rightLabel,
      className: "basic"
    }, rightLabelProps), rightLabel);
  }

  var thisButton = null;

  if (button) {
    thisButton = /*#__PURE__*/React.createElement(Button, actionProps, button);
  } else if (icon) {
    thisButton = /*#__PURE__*/React.createElement(Icon, _extends({}, actionProps, {
      style: _objectSpread(_objectSpread({}, Styles.icon), actionProps.style)
    }), icon);
  }

  return /*#__PURE__*/React.createElement(SemanticUI, {
    className: classes,
    style: style
  }, thisLeftLabel, /*#__PURE__*/React.createElement(SemanticUI, _extends({
    atom: "input"
  }, others, {
    style: inputStyle,
    ui: false
  })), thisRightLabel, children, thisButton);
};

export default InputBox;
var Styles = {
  rightLabel: {
    borderRadius: 0
  },
  icon: {
    position: "absolute",
    top: 0,
    right: 0,
    opacity: 0.5
  }
};
var injects;
var InjectStyles = {
  label: [{
    background: "transparent",
    color: "inherit"
  }, ".ui.transparent.inverted.input>.label"]
};