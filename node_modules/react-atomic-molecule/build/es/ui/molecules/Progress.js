import _objectSpread from "reshow-runtime/es/helpers/objectSpread2";
import _extends from "reshow-runtime/es/helpers/extends";
import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["label", "labelProps", "barLabel", "barLabelProps", "barProps", "children", "className", "percent", "style", "styles"],
    _excluded2 = ["style", "styles"];
import React from "react";
import { mixClass } from "class-lib";
import SemanticUI from "../molecules/SemanticUI";
import Label from "../molecules/Label";
import reactStyle from "../../src/lib/styles/index";
import useCSS from "../../src/useCSS";

var Progress = function Progress(props) {
  useCSS(["progress"], "semantic");

  var label = props.label,
      labelProps = props.labelProps,
      barLabel = props.barLabel,
      barLabelProps = props.barLabelProps,
      barProps = props.barProps,
      children = props.children,
      className = props.className,
      percent = props.percent,
      style = props.style,
      styles = props.styles,
      others = _objectWithoutProperties(props, _excluded);

  var thisLabel = label ? /*#__PURE__*/React.createElement(Label, _extends({
    ui: false
  }, labelProps), label) : children;

  var _ref = barProps || {},
      barStyle = _ref.style,
      barStyles = _ref.styles,
      otherBarProps = _objectWithoutProperties(_ref, _excluded2);

  var classes = mixClass(className, "progress");
  otherBarProps.children = barLabel ? /*#__PURE__*/React.createElement(SemanticUI, _extends({
    className: "progress",
    ui: false
  }, barLabelProps), barLabel) : otherBarProps.children;
  return /*#__PURE__*/React.createElement(SemanticUI, _extends({}, others, {
    className: classes,
    styles: [reactStyle(style, null, false), styles]
  }), /*#__PURE__*/React.createElement(SemanticUI, _extends({
    className: "bar",
    ui: false
  }, otherBarProps, {
    styles: [reactStyle(_objectSpread({
      width: percent + "%"
    }, barStyle), null, false), barStyles]
  })), thisLabel);
};

export default Progress;