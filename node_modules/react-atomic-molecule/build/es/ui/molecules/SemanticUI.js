import _objectWithoutProperties from "reshow-runtime/es/helpers/objectWithoutProperties";
var _excluded = ["ui", "renderChildren", "atom", "children", "styles", "styleOrder"];
import React, { createElement } from "react";
import * as Atoms from "react-atomic-atom";
import get from "get-object-value";
import ucfirst from "ucfirst-js";
import { KEYS } from "reshow-constant";
import injectStyle from "../../src/lib/styles/injectStyle";
import bindStyles from "../../src/lib/styles/bindStyles";
import { bindChildKey } from "../../src/getChildMapping";

var getChildren = function getChildren(render, children) {
  return render ? bindChildKey(children) : null;
};

var SemanticUI = function SemanticUI(_ref) {
  var _ref$ui = _ref.ui,
      ui = _ref$ui === void 0 ? true : _ref$ui,
      _ref$renderChildren = _ref.renderChildren,
      renderChildren = _ref$renderChildren === void 0 ? true : _ref$renderChildren,
      atom = _ref.atom,
      children = _ref.children,
      styles = _ref.styles,
      styleOrder = _ref.styleOrder,
      others = _objectWithoutProperties(_ref, _excluded);

  var component;

  switch (atom) {
    case "null":
      return null;

    case "input":
      component = Atoms.Input;
      renderChildren = false;
      break;

    case "img":
      component = Atoms.Img;
      renderChildren = false;
      break;

    case "path":
      component = Atoms.Path;
      renderChildren = false;
      ui = false;
      break;

    default:
      component = get(Atoms, [ucfirst(atom)], function () {
        return Atoms.Div;
      });
      break;
  } // bindStyles need after inject


  if (styles) {
    var className = others.className,
        style = others.style; // Need avoid props pass by ref !!important!!

    injectStyle();
    var bindProps = bindStyles({
      className: className,
      style: style,
      styles: styles,
      styleOrder: styleOrder
    });
    KEYS(bindProps).forEach(function (key) {
      return others[key] = bindProps[key];
    });
  }

  if (ui) {
    /**
     * Need put after bindProps
     *!!important!! others.className maybe effect by bindProps, so use it here.
     */
    others.className = others.className ? others.className + " ui" : "ui";
  }

  return /*#__PURE__*/createElement(component, others, getChildren(renderChildren, children));
};

export default SemanticUI;